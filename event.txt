// SPDX-License-Identifier: GPL-3.0


pragma solidity >=0.5.0 <0.9.0;
contract EventOrganize{

    
        struct Event{
   address organizer;
   string name;
   uint date; 
   uint price;
   uint totalTicket;  
   uint ticketLeft;
 }
    
mapping(uint=>Event) public events;
 mapping(address=>mapping(uint=>uint)) public tickets;
 uint public nextId;
 
 function createEvent(string memory name, uint date, uint price, uint totalTicket) public{
     require(date>block.timestamp,"You can only create events for future date");
     require(totalTicket>0," To create an event some minimum amount of tickets are required");


     events[nextId] = Event(msg.sender,name,date,price,totalTicket,totalTicket);
        nextId++;

 } 

 function buyTicket(uint id, uint quantity) external payable{
     require(events[id].date!=0, "Event does not exist");
     require(events[id].date>block.timestamp,"Event has already occured");
     Event storage _event= events[id];
     require(msg.value==(_event.price*quantity),"Ethere is not enough");
      require(_event.ticketLeft>=quantity,"Not enough tickets");
   _event.ticketLeft-=quantity;
   tickets[msg.sender][id]+=quantity;



 }

 function transfer(uint id, uint quantity, address to) external{
     require(events[id].date!=0, "Event does not exist");
     require(events[id].date>block.timestamp,"Event has already occured");

     require(tickets[msg.sender][id]>=quantity,"You do not have enough tickets");
   tickets[msg.sender][id]-=quantity;
   tickets[to][id]+=quantity;



 }



}